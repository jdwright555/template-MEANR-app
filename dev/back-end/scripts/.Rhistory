Data$Debit_Credit<-extract_numeric(Data$Debit_Credit)
#Coerce all character variables to lower case so we have a standard format which will be helpful for different banks
Data$Type<-tolower(Data$Type)
Data$Merchant_Description<-tolower(Data$Merchant_Description)
###Need to attach the month
###Convert the date variable
Data$Date<-as.Date(Data$Date,'%d/%m/%Y')
###Add a month variable
Data$Month<-format(Data$Date, "%m")
###Add a day variable
Data$Day<-format(Data$Date, "%d")
###Add a year variable
Data$Year <-format(Data$Date, "%Y")
#31 Days: Jan, Mar, May, July, Aug, Oct, Dec
#30 Days: Apr, June, Sep, Nov
#28 Days: Feb
Months_31<-subset(Data,Month=="01"|Month=="03"|Month=="05"|Month=="07"|Month=="08"|Month=="10"|Month=="12")
Months_30<-subset(Data,Month=="04"|Month=="06"|Month=="09"|Month=="11")
Months_28<-subset(Data,Month=="02")
########################################################################################################################################
########################################################################################################################################
##########################################                                                     #########################################
##########################################WE ACCUMULATE THE INFORMATION REQUIRED FOR ELIGIBILITY########################################
##########################################                                                     #########################################
########################################################################################################################################
########################################################################################################################################
######We Count the number of direct debits
##We subset the data so the payment type is direct debit
Direct_Debits_Data<-subset(Data,grepl("direct debit",Type)|Type=="dd"|Type=="ddr"|Type=="directdep"|Type=="d/d")
##Do this using the plyr package, returns a simple dataframe with year, month and count of direct debit
Direct_Debits_Monthly_Count<-count(Direct_Debits_Data,Year,Month)
names(Direct_Debits_Monthly_Count)[3]<-"Direct_Debit_Count"
##Number of distinct direct debits
if(Current_Bank[1,1]=="Santander"| Current_Bank[1,1]=="Lloyds"|Current_Bank[1,1]=="Barclays"|Current_Bank[1,1]=="RBS"){
distinct_direct_debits<-length(table(Direct_Debits_Data$Merchant_Description))
} else if(Current_Bank[1,1]=="Nationwide") {
distinct_direct_debits<-length(table(Direct_Debits_Data$Type))
}
######We calculate the average credit paid in each month
Credit_Paid_In_Data<-subset(Data,Debit_Credit>0 & !grepl("interest",Type) & !grepl("interest",Merchant_Description))
Total_Monthly_Credit_Paid_In<- aggregate(Balance ~ Month+Year, Credit_Paid_In_Data, sum)
Average_Monthly_Credit_paid_In <-mean(Total_Monthly_Credit_Paid_In$Balance)
########################################################################################################################################
########################################################################################################################################
##########################################                                                     #########################################
##########################################WE ACCUMULATE THE INFORMATION REQUIRED FOR INTEREST  #########################################
##########################################                                                     #########################################
########################################################################################################################################
########################################################################################################################################
#Take the transactions in the final day
#######
Months_31_agg <- aggregate(Day ~ Month+Year, Months_31, max)
# then simply merge with the original
Months_31_Last <- merge(Months_31_agg, Months_31)
Months_30_agg <- aggregate(Day ~ Month+Year, Months_30, max)
# then simply merge with the original
Months_30_Last <- merge(Months_30_agg, Months_30)
Months_28_agg <- aggregate(Day ~ Month+Year, Months_28, max)
# then simply merge with the original
Months_28_Last <- merge(Months_28_agg, Months_28)
#The Merging ruins the order of the columns so we ensure that the data has a consistent order and bind
Months_31_Last<-Months_31_Last[,c("Date","Type","Merchant_Description","Debit_Credit","Balance","Month",
"Day","Year" )]
Months_30_Last<-Months_30_Last[,c("Date","Type","Merchant_Description","Debit_Credit","Balance","Month",
"Day","Year" )]
Months_28_Last<-Months_28_Last[,c("Date","Type","Merchant_Description","Debit_Credit","Balance","Month",
"Day","Year" )]
Months_31_Final_Balance_Data<-Months_31_Last %>% group_by(Year,Month) %>% filter(Balance==max(Balance)) %>% arrange(Year,Month,Day)
Months_30_Final_Balance_Data<-Months_30_Last %>% group_by(Year,Month) %>% filter(Balance==max(Balance)) %>% arrange(Year,Month,Day)
Months_28_Final_Balance_Data<-Months_28_Last %>% group_by(Year,Month) %>% filter(Balance==max(Balance)) %>% arrange(Year,Month,Day)
Final_Balance_Data<-rbind(Months_31_Final_Balance_Data,Months_30_Final_Balance_Data,Months_28_Final_Balance_Data)
Ave_End_Of_Month_Balance<-mean(Final_Balance_Data$Balance)
########################################################################################################################################
########################################################################################################################################
##########################################                                                    ##########################################
##########################################WE ACCUMULATE THE INFORMATION REQUIRED FOR CASH BACK #########################################
##########################################                                                    ##########################################
########################################################################################################################################
########################################################################################################################################
#######Contactless Payments
Contactless_Data<-subset(Data,Type=="Contactless Payment"|Type=="clp")
##We calculate the sum of contactless payments per month
Contactless_Sums_Data<-Contactless_Data %>% group_by(Year,Month) %>% summarise(Total=sum(Balance))
###The above dataset has the amount of contactless payments by month
########################################################################################################################################
########################################################################################################################################
##########################################                                                    ##########################################
##########################################WE ACCUMULATE THE INFORMATION REQUIRED FOR COSTS     #########################################
##########################################                                                    ##########################################
########################################################################################################################################
########################################################################################################################################
###We count the number of days that balance is negative
##We subset the data so the payment type is direct debit
Negative_Balance_Data<-subset(Data,Balance<0)
##Number of days per month balance negative
##Do this using the plyr package, returns a simple dataframe with year, month and number of times balance is negative per month
Negative_Balance_Monthly_Count<-count(Negative_Balance_Data,Year,Month)
##Number of months per year balance negative
Negative_Balance_Months<-dim(Negative_Balance_Monthly_Count)[1] #The number of rows is the number of days
########################################################################################################################################
#We begin scoring people through the eligibility and rewards processes##################################################################
########################################################################################################################################
#Eligibility
#Minimum monthly payment
Provider_Data$Min_Monthly_Payment<-ifelse(Average_Monthly_Credit_paid_In>=Provider_Data$RequiredMPayment,1,0)
#Minimum direct debits
Provider_Data$Min_Direct_Debit<-ifelse(distinct_direct_debits>=Provider_Data$RequiredMDirectDebits,1,0)
#A customer is eligible if both Min_Monthly_Payment and Min_Direct_Debit equal 1
Provider_Data$Eligible<-ifelse(Provider_Data$Min_Monthly_Payment==1 & Provider_Data$Min_Direct_Debit==1,1,0)
#INTEREST AND BONUSES
#Switching incentive
Provider_Data$Switching_Incentive<-ifelse(Provider_Data$Provider %in% Current_Bank,0,Provider_Data$SwitchingBonus)
#Interest earned (Note pmin and pmax)
##We add an Ave_End_Of_Month_Balance column to the provider data for ease
Provider_Data$Ave_End_Of_Month_Balance<-rep(Ave_End_Of_Month_Balance,times=dim(Provider_Data)[1])
Provider_Data$Interest_Earned<-ifelse(Ave_End_Of_Month_Balance<Provider_Data$BalanceYMinTier1,0,
pmin(Provider_Data$BalanceYMaxTier1,Provider_Data$Ave_End_Of_Month_Balance)*Provider_Data$InterestYTier1
+pmax(0,pmin(Provider_Data$BalanceYMaxTier2,Provider_Data$Ave_End_Of_Month_Balance-Provider_Data$BalanceYMaxTier1))*Provider_Data$InterestYTier2
+pmax(0,pmin(Provider_Data$BalanceYMaxTier3,Provider_Data$Ave_End_Of_Month_Balance-Provider_Data$BalanceYMaxTier2))*Provider_Data$InterestYTier3)
Provider_Data$Interest_Percentage<-100*(Provider_Data$Interest_Earned/Provider_Data$Ave_End_Of_Month_Balance)
Provider_Data$distinct_direct_debits<-rep(distinct_direct_debits,times=dim(Provider_Data)[1])
Provider_Data$Average_Monthly_Credit_paid_In<-rep(Average_Monthly_Credit_paid_In,times=dim(Provider_Data)[1])
######Costs#######
#Standard annual fee
Provider_Data$Standard_Annual_Fee<-Provider_Data$FeeMNow*12
Provider_Data$Value<-Provider_Data$Interest_Earned + Provider_Data$Switching_Incentive
Provider_Data$set_up_fee<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Initial_annual_fee<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Overdraft_arrangement_fees<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Authorised_overdraft_interest<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Authorised_overdraft_fees<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Unauthorised_overdraft_interest<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$Unauthorised_overdraft_fees<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$ATM_fees<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Provider_Data$CHAPS_fees<-c(0,0,0,0,0,0,0,0,0,0,0,0,0,0)
####Results
Product_List<-subset(Provider_Data, Eligible==1,select=c(Ave_End_Of_Month_Balance,Average_Monthly_Credit_paid_In,distinct_direct_debits,Provider,Product,Interest_Percentage,
Standard_Annual_Fee,MSERatingGreat,MSERatingOkay,MSERatingPoor,
Value,Interest_Earned,Switching_Incentive,
set_up_fee,Initial_annual_fee,Overdraft_arrangement_fees,
Authorised_overdraft_interest,Authorised_overdraft_fees,
Unauthorised_overdraft_interest,Unauthorised_overdraft_fees,ATM_fees,CHAPS_fees,MSMClickOutURL))
#Product_List<-data.frame(Product_List,Average_Monthly_Credit_paid_In)
Product_List$Provider <- as.character(Product_List$Provider)
Product_List$Product <- as.character(Product_List$Product)
Product_List$MSMClickOutURL <- as.character(Product_List$MSMClickOutURL)
#Our dataframe cursor needs to be conversted to bson
out <- lapply(split(Product_List, 1:nrow(Product_List)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
mongo.insert.batch(mongo,"midata.results",out)
#######################################################################################################################################
#######################################################################################################################################
#######################################################################################################################################
#######################################################################################################################################
#######################################################################################################################################
###############################ENERGY CAlculations#####################################################################################
#We set up the vector of provider names
pattern <-tolower("BRITISHGAS|BRGAS|BRITISH GAS|EDF|EDF|NPOWER|SCOTTISHPOWER|SCOTTISHPOWER|SWALEC|SWALEC|SOUTHERNELECTRIC|SEGAS|SOUTHERN ELECTRIC|E.ON|SCOTTISHHYDRO|SCOTTISH HYDRO|CO-OPERATIVEENERG|CO-OP ENERGY|DALIGAS|DALIGAS|BETTERENERGY|BETTER ENERGY|ECOTRICITY|ECOTRICITY|EXTRAENERGY|EXTRA ENERGY|FIRSTUTILITY|FIRST UTILITY|FLOWENERGY|FLOW ENERGY|GOODENERGY|GOOD ENERGY|GOODENERGY|GOOD ENERGY|GREENSTARENERGY|GOOD STAR ENERGY|ISUPPLYENERGY|I SUPPLY ENERGY|ISUPPLYENERGY|I SUPPLY ENERGY|LOCO2|LOCO2 ENERGY|LONDONENERGY|LONDON ENERGY|OVOENERGY|OVO ENERGY|SPARKENERGY|SPARK ENERGY|ATLANTIC|ATLANTIC|UTILITYWAREHOUSE|UTILITY WAREHOUSE|UTILITA|UTILITA")
###We select the rows from our Midata file which have energy payments
energy_data<-subset(Data,grepl(pattern,Data$Merchant_Description))
#We classify the type of payment based on the dimensions of the energy_data dataframe
if(dim(energy_data)[1]==4|dim(energy_data)[1]==3){
Payment_Type<-"Quarterly"
} else if(dim(energy_data)[1]==12|dim(energy_data)[1]==11){
Payment_Type<-"Monthly"
} else if(dim(energy_data)[1]==1){
Payment_Type<-"Annual"
} else{
Payment_Type<-"Weekly"
}
#Calculate the total annual expenditure
annual_energy_expenditure<-abs(sum(energy_data$Debit_Credit))
#Want to indicate the energy provider currently on
chr.energy.providers <-
tolower(c("BRITISHGAS", "BRGAS", "BRITISH GAS", "EDF", "EDF", "NPOWER",
"SCOTTISHPOWER", "SCOTTISHPOWER", "SWALEC", "SWALEC", "SOUTHERNELECTRIC",
"SEGAS", "SOUTHERN ELECTRIC", "E.ON", "SCOTTISHHYDRO",
"SCOTTISH HYDRO", "CO-OPERATIVEENERG", "CO-OP ENERGY", "DALIGAS", "DALIGAS",
"BETTERENERGY", "BETTER ENERGY", "ECOTRICITY", "ECOTRICITY", "EXTRAENERGY",
"EXTRA ENERGY", "FIRSTUTILITY", "FIRST UTILITY", "FLOWENERGY", "FLOW ENERGY",
"GOODENERGY", "GOOD ENERGY", "GOODENERGY", "GOOD ENERGY", "GREENSTARENERGY",
"GOOD STAR ENERGY", "ISUPPLYENERGY", "I SUPPLY ENERGY", "ISUPPLYENERGY",
"I SUPPLY ENERGY", "LOCO2", "LOCO2 ENERGY", "LONDONENERGY", "LONDON ENERGY",
"OVOENERGY", "OVO ENERGY", "SPARKENERGY", "SPARK ENERGY", "ATLANTIC", "ATLANTIC",
"UTILITYWAREHOUSE", "UTILITY WAREHOUSE", "UTILITA", "UTILITA"))
#By taking the 1,1 element of the dataframe below, this takes the most recent provider name
energy_provider_subset<-as.vector(distinct(subset(Data,grepl(pattern,Data$Merchant_Description),select=Merchant_Description))[1,1])
provider_index<-rep(0,times=length(chr.energy.providers))
for(i in 1:length(chr.energy.providers)){
pattern_str<-chr.energy.providers[i]
if(grepl(pattern_str,energy_provider_subset))
{
provider_index[i]<-1
} else {provider_index[i]<-0}
}
Energy_Provider<-chr.energy.providers[provider_index==1]
# final energy results
Energy_results<-data.frame(expenditure=annual_energy_expenditure,provider=Energy_Provider,EnergyPrices)
Energy_results$provider <- as.character(Energy_results$provider)
Energy_results$postcode <- as.character(Energy_results$postcode)
#Our dataframe cursor needs to be conversted to bson
energy_out <- lapply(split(Energy_results, 1:nrow(Energy_results)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
mongo.insert.batch(mongo,"midata.energyresults",energy_out)
# close connection
mongo.destroy(mongo)
}
res <- "MiData processed"
return(toJSON(res))
}
midata()
source("MiData-test.R", echo = FALSE, print.eval = FALSE)
source("MiData-test.R", echo = FALSE, print.eval = FALSE)
source("MiData-test.R", local = FALSE, echo = FALSE, print.eval = FALSE)
source("MiData-test.R", local = TRUE, echo = FALSE, print.eval = FALSE)
getwd
getwd()
path <- getwd()
path
pathObj <- '{ pathname : "mypath" }'
library(RJSONIO)
fromJSON(pathObj)
pathObj <- '{ "pathname" : "mypath" }'
fromJSON(pathObj)
fromJSON(pathObj)$pathname
type(fromJSON(pathObj))
fromJSON(pathObj)[1]
fromJSON(pathObj)[1,1]
fromJSON(pathObj)[0]
fromJSON(pathObj)$name
fromJSON(pathObj)$names
pathObj1 <- fromJSON(pathObj)
pathObj[pathname]
pathObj["pathname"]
pathObj
pathObj1
pathObj1["pathname"]
names(pathObj1) <-
c()
pathObj1
?gsub
gsub("routes", "scripts", pathObj, ignore.case=FALSE, fixed=FALSE)
gsub("mypath", "mypath1", pathObj, ignore.case=FALSE, fixed=FALSE)
library(rmongodb)
library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(RJSONIO)
library(lubridate)
host<-"localhost" #This can be found using the getHostName() function in mongo
username <- ""
password <- ""
db <- "contactdb"
mongo<-mongo.create(host=host , db=db, username=username, password=password)
objects<-mongo.get.database.collections(mongo, db)
collection <- "contacts"
namespace  <- paste(db, collection, sep=".")
# get contacts data
Contacts <- mongo.find(mongo, ns=namespace)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob, format = "%m/%d/%Y")
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
planner <- unlist(lapply(Contacts$dob, birthday_planner))
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, planner, ages_ny)
host<-"localhost" #This can be found using the getHostName() function in mongo
username <- ""
password <- ""
db <- "contactdb"
mongo<-mongo.create(host=host , db=db, username=username, password=password)
#if (mongo.is.connected(mongo)) {
objects<-mongo.get.database.collections(mongo, db)
collection <- "contacts"
namespace  <- paste(db, collection, sep=".")
# get contacts data
Contacts <- mongo.find(mongo, ns=namespace)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob, format = "%m/%d/%Y")
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
planner <- unlist(lapply(Contacts$dob, birthday_planner))
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, planner, ages_ny)
#Our dataframe cursor needs to be conversted to bson
#energy_out <- lapply(split(Energy_results, 1:nrow(Energy_results)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
#mongo.insert.batch(mongo,"midata.energyresults",energy_out)
# close connection
#mongo.destroy(mongo)
#}
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, planner, ages_ny, stringsAsFactors = FALSE)
next_bd <- bd_planner_df[bd_planner_df$planner = min(bd_planner_df$planner), ]
next_bd <- bd_planner_df[bd_planner_df$planner ==
next_bd <- bd_planner_df[bd_planner_df$planner == min(bd_planner_df$planner), ]
]
next_bd <- bd_planner_df[bd_planner_df$planner == min(bd_planner_df$planner), ]
host<-"localhost" #This can be found using the getHostName() function in mongo
username <- ""
password <- ""
db <- "contactdb"
mongo<-mongo.create(host=host , db=db, username=username, password=password)
#if (mongo.is.connected(mongo)) {
objects<-mongo.get.database.collections(mongo, db)
collection <- "contacts"
namespace  <- paste(db, collection, sep=".")
# get contacts data
Contacts <- mongo.find(mongo, ns=namespace)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob, format = "%m/%d/%Y")
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
days_to_bd <- unlist(lapply(Contacts$dob, birthday_planner))
# outputs
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, days_to_bd, ages_ny, stringsAsFactors = FALSE)
next_bd <- bd_planner_df[bd_planner_df$days_to_bd == min(bd_planner_df$days_to_bd), ]
# Our dataframe cursor needs to be conversted to bson
#energy_out <- lapply(split(Energy_results, 1:nrow(Energy_results)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
#mongo.insert.batch(mongo,"midata.energyresults",energy_out)
# close connection
#mongo.destroy(mongo)
#}
# Our dataframe cursor needs to be conversted to bson
bd_planner <- lapply(split(bd_planner_df, 1:nrow(bd_planner_df)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
collection_out <- "bd_planner"
namespace_out <- paste(db, collection_out, sep=".")
mongo.insert.batch(mongo, namespace_out, bd_planner)
host<-"localhost" #This can be found using the getHostName() function in mongo
username <- ""
password <- ""
db <- "contactdb"
mongo<-mongo.create(host=host , db=db, username=username, password=password)
if (mongo.is.connected(mongo)) {
objects<-mongo.get.database.collections(mongo, db)
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob, format = "%m/%d/%Y")
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
days_to_bd <- unlist(lapply(Contacts$dob, birthday_planner))
# outputs
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, days_to_bd, ages_ny, stringsAsFactors = FALSE)
next_bd <- bd_planner_df[bd_planner_df$days_to_bd == min(bd_planner_df$days_to_bd), ]
# Our dataframe cursor needs to be conversted to bson
bd_planner <- lapply(split(bd_planner_df, 1:nrow(bd_planner_df)), function(x) mongo.bson.from.list(x))
#We now insert into mongo
collection_out <- "bd_planner"
namespace_out <- paste(db, collection_out, sep=".")
mongo.insert.batch(mongo, namespace_out, bd_planner)
# close connection
mongo.destroy(mongo)
}
res <- "Scripts executed"
return(toJSON(res))
toJSON(res)
res <- c("Scripts executed", "Hello")
toJSON(res)
toJSON(res)[0]
toJSON(res)[1]
toJSON(res)[2]
res <- list("Scripts executed", "Hello")
toJSON(res)[2]
toJSON(res)
toJSON(res)[0]
toJSON(res)[1]
names(res)
names(res) <- c("message", "result")
res
toJSON(res)
toJSON(res)[1]
toJSON(res)[1].message
toJSON(res)[1]."message"
message <- "Hello" + "World"
names(bd_planner_df) <- c("firstname", "lastname", "days_to_bd", "ages_ny")
# outputs
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, days_to_bd, ages_ny, stringsAsFactors = FALSE)
names(bd_planner_df) <- c("firstname", "lastname", "days_to_bd", "ages_ny")
next_bd_df <- bd_planner_df[bd_planner_df$days_to_bd == min(bd_planner_df$days_to_bd), ]
next_bd_message <- paste("The next person to have a birthday is ", next_bd_df$firstname, " ", next_bd_df$lastname, ", whose birthday is in ", next_bd_df$days_to_bd, " days and on which day they will turn ", next_bd_df$ages_ny, ".", sep="")
# loads libraries
library(rmongodb)
library(RCurl)
library(plyr)
library(dplyr)
library(tidyr)
library(RJSONIO)
library(lubridate)
##### THIS SCRIPT PRODUCES A BIRTHDAY PLANNER FROM YOUR LIST OF CONTACTS #####
# set up connection to mongo
host<-"localhost" #This can be found using the getHostName() function in mongo
username <- ""
password <- ""
db <- "contactdb"
mongo<-mongo.create(host=host , db=db, username=username, password=password)
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
View(Contacts)
View(Contacts)
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob, format = "%m/%d/%Y")
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
days_to_bd <- unlist(lapply(Contacts$dob, birthday_planner))
# outputs
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, days_to_bd, ages_ny, stringsAsFactors = FALSE)
names(bd_planner_df) <- c("firstname", "lastname", "days_to_bd", "ages_ny")
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
Contacts$dob <- as.Date(Contacts$dob)
# get contacts data
collection_in <- "contacts"
namespace_in  <- paste(db, collection_in, sep=".")
Contacts <- mongo.find(mongo, ns=namespace_in)
Contacts <- mongo.cursor.to.data.frame(Contacts, stringsAsFactors = FALSE)
# reformats dob to a Date format
Contacts$dob <- as.Date(Contacts$dob)
ages_ty <- floor(as.numeric(Sys.Date() - Contacts$dob)/365)
ages_ny <- ages_ty + 1
birthday_planner <- function(dob) {
bd_ty <- as.Date(paste(year(Sys.Date()), month(dob), day(dob), sep = "-"))
bd_ny <- as.Date(paste(year(Sys.Date())+1, month(dob), day(dob), sep = "-"))
if (Sys.Date() <= bd_ty) {
days_to_bd <- as.numeric(bd_ty - Sys.Date())
} else {
days_to_bd <- as.numeric(bd_ny - Sys.Date())
}
return(days_to_bd)
}
days_to_bd <- unlist(lapply(Contacts$dob, birthday_planner))
# outputs
bd_planner_df <- data.frame(Contacts$firstname, Contacts$lastname, days_to_bd, ages_ny, stringsAsFactors = FALSE)
names(bd_planner_df) <- c("firstname", "lastname", "days_to_bd", "ages_ny")
# Our output dataframe cursor needs to be conversted to bson
bd_planner <- lapply(split(bd_planner_df, 1:nrow(bd_planner_df)), function(x) mongo.bson.from.list(x))
# We now insert into mongo
collection_out <- "planners"
namespace_out <- paste(db, collection_out, sep=".")
mongo.insert.batch(mongo, namespace_out, bd_planner)
